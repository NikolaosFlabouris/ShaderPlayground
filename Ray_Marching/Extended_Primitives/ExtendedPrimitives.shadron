// Basic Ray March

#extension gif
#version 140
#include <math_constants>

const int WIDTH = 700;
const int HEIGHT = 700;
const int MAX_STEPS = 100;
const float MAX_DIST = 100.0;
const float SURF_DIST = 0.01;

parameter int Object_Selector = 1 : range(1, 9);
parameter vec3 Envrionment_Colour = vec3(1.0, 1.0, 1.0) : color();
parameter vec3 Light_Colour = vec3(1.0, 1.0, 1.0) : color();

///
/// Elongates the shape in the x, y and z positions.
/// \param pos - position in space.
/// \param elongation - elongation factor in x, y, z directions.
/// \return - new position in space.
glsl vec3 ModifierElongate(vec3 pos, vec3 elongation)
{
    return pos - clamp(pos, -elongation, elongation);
}

glsl float ModifierRound(float pos, float roundfactor)
{
    return pos - roundfactor;
}

glsl float ModifierOnion(float dist, float thickness)
{
    return abs(dist) - thickness;
}

glsl float ModifierExtrusion(vec3 pos, float sdf, float height)
{
    vec2 extrusion = vec2(sdf, abs(pos.z) - height);
  	return min(max(extrusion.x, extrusion.y), 0.0) + length(max(extrusion, 0.0));
}

glsl vec2 ModifierRevolution(vec3 pos, float offset)
{
    return vec2(length(pos.xz) - offset, pos.y);
}

///
/// Returns the distance of the closest object in the scene to the specified point. Different
/// objects are loading into the scene based on the Object Selector slider.
/// \param pos - Position in space to measure against.
/// \return - Distance to closet object in scene.
///
glsl float GetDistToScene(vec3 pos)
{
    float objDist = 0.0;
    switch(Object_Selector)
    {
    case 1: // SPHERE - Elongated
        // Rotation matrix, rotate over time.
        mat3 sphereRotation = mat3(cos(shadron_Time), 0.0, sin(shadron_Time), 
                                   0.0, 1.0, 0.0,
                                  -sin(shadron_Time), 0.0,  cos(shadron_Time));
        // x, y, z position and radius.
        vec3 spherePos = vec3(0.0, 1.3, 7.0);
        float sphereRadius = 1.0;
        // Elongate in the x and y directions.
        vec3 elongation = vec3(1.5, 0.3, 0.0);
        // Apply transformation and modifier.
        vec3 sphereTransformed = ModifierElongate(sphereRotation * (pos - spherePos), elongation);
        // Sphere is defined as a uniform distace from position.
        float sphereDist =  length(sphereTransformed) - sphereRadius;
        objDist = sphereDist;
        break;
    case 2: // SQUARE BOX - Rounded
        // Rotation matrix, rotate over time.
        mat3 sqBoxRotation = mat3(cos(shadron_Time), 0.0, sin(shadron_Time), 
                        0.0, 1.0, 0.0,
                        -sin(shadron_Time), 0.0,  cos(shadron_Time));
        vec3 sqBoxPos = vec3(0.0, 0.9, 7.0);
        // x, y, z widths. All the same cause it is a square box!
        vec3 sqBoxWidth = vec3(0.6);
        // Apply transformation and then rotation to centre of box.
        vec3 sqBoxTransformed = sqBoxRotation * (pos - sqBoxPos);
        // Apply width which defines the box shape.
        vec3 sqBoxDist = abs(sqBoxTransformed) - sqBoxWidth;
        objDist = length(max(sqBoxDist, 0.0));
        // Edge rounding factor.
        float sqBoxRound = 0.3;
        objDist = ModifierRound(objDist, sqBoxRound);
        break;
    case 3: // CAPPED TORUS - Double Onion
        // Rotation matrix, flip vertical then rotate over time.
        mat3 torusRotation = mat3(1.0, 0.0, 0.0,
                                  0.0, 0.0, -1.0,
                                  0.0, 1.0, 0.0)
                             *
                             mat3(cos(shadron_Time), 0.0, sin(shadron_Time), 
                                          0.0, 1.0, 0.0,
                                          -sin(shadron_Time), 0.0,  cos(shadron_Time));
        vec3 torusPos = vec3(0.0, 1.5, 7.0);
        // Inner and Outer radii.
        vec2 torusRadius = vec2(0.4, 1.0);
        // Apply transformation and then rotation to centre of torus.
        vec3 torusTransformed = torusRotation * (pos - torusPos);
        // Calculate shape based on inner and outer radii.
        vec2 torusDist = vec2(length(torusTransformed.xz) - torusRadius.y, torusTransformed.y);
        objDist = length(torusDist) - torusRadius.x;
        // Onion edge thinkness.
        float torusThickness = 0.1;
        objDist = max(ModifierOnion(ModifierOnion(objDist, torusThickness), torusThickness*0.5), length(torusTransformed.xz)-1.0);
        break;
    case 4: // CROSS PLANE - Extrusion
        // Rotation matrix, rotate over time.
        mat3 crossRotation = mat3(cos(shadron_Time), 0.0, sin(shadron_Time), 
                                          0.0, 1.0, 0.0,
                                          -sin(shadron_Time), 0.0,  cos(shadron_Time));
        vec3 crossPos = vec3(0.0, 1.0, 7.0);
        // Width of the cross and width of the 'legs'.
        vec2 crossDimensions = vec2(0.9, 0.2);
        // Controls the magnitude of the 'cut outs' that make the cross shape.
        float crossCurveMagnitude = 0.09;
        // Apply transformation and then rotation to cross. Abs to mirror shape in all directions.
        vec3 crossTransformed = abs(crossRotation * (pos - crossPos));

        // Processing to produce cross.
        vec2 crossRegion = (crossTransformed.y > crossTransformed.x) ? crossTransformed.yx : crossTransformed.xy;
        vec2 crossShape = crossRegion - crossDimensions;
        float crossMaxCoord = max(crossShape.y,crossShape.x);
        crossShape = (crossMaxCoord > 0.0) ? crossShape : vec2(crossDimensions.y - crossRegion.x, -crossMaxCoord);
        float crossDist = sign(crossMaxCoord) * length(max(crossShape, 0.0)) + crossCurveMagnitude;

        // Extrude plane to make 3D shape.
        objDist = ModifierExtrusion(crossTransformed, crossDist, 0.5);
        break;
    case 5: // Vesica Piscis - Revolution
        mat3 vesicaRotation = mat3(1.0, 0.0, 0.0,
                                  0.0, 0.0, -1.0,
                                  0.0, 1.0, 0.0)
                            *
                             mat3(cos(shadron_Time), 0.0, sin(shadron_Time), 
                                          0.0, 1.0, 0.0,
                                          -sin(shadron_Time), 0.0,  cos(shadron_Time));
        vec3 vesicaPos = vec3(0.0, 1.5, 7.0);
        // Height and 'inverse radius' of the vesica.
        vec2 vesicaDimensions = vec2(0.7, 0.3);
        // Apply transformation and then rotation to vesica. Abs to mirror shape in all directions.
        // Modifider rotates the 2D about a point in space (centre + offset) to form a NFL football/torus like shape
        // (based on off offset value)
        vec2 vesicaTransformed = abs(ModifierRevolution(vesicaRotation * (pos - vesicaPos), 0.5 + 0.5*sin(shadron_Time/2)));

        // Processing to produce vesica piscis shape.
        float vesicaShape = sqrt(vesicaDimensions.x * vesicaDimensions.x - vesicaDimensions.y * vesicaDimensions.y);
        float vesicaDist = ((vesicaTransformed.y - vesicaShape) * vesicaDimensions.y > vesicaTransformed.x * vesicaShape)
                ? length(vesicaTransformed - vec2(0.0, vesicaShape))
                : length(vesicaTransformed - vec2(-vesicaDimensions.y, 0.0)) - vesicaDimensions.x;

        objDist = vesicaDist;
        break;
    default:
        break;
    }

    // Ground plane is pos.y distance away from position as it is at y = 0.
    float planeDist = pos.y;
    
    // Return distance to closest object.
    return min(objDist, planeDist);
}

///
/// From the specified origin, ray march in the given direction measuring the distance
/// to the closest object at each step. Once marched close enough to any object in the
/// scene (or marched past the point we care) return the distance.
/// \param rayOrigin - The location to start ray marching from.
/// \return - distance to scene along ray direction (or max render distance)
///
glsl float RayMarch(vec3 rayOrigin, vec3 rayDirection)
{
	float distFromOrigin = 0.0;
    
    // Ray march for a given number of steps.
    for(int step = 0; step < MAX_STEPS; ++step)
    {
        // Current location.
    	vec3 stepLocation = rayOrigin + rayDirection * distFromOrigin;
        // Get the closest distance to anything in the scene from current location.
        float distToScene = GetDistToScene(stepLocation);
        // Travel that distance forwards.
        distFromOrigin += distToScene;
        // If at max render distance (ray missed all objects in scene and is shooting off
        // to infinity) or super close to an object's surface return current distance.
        if(distFromOrigin > MAX_DIST || distToScene < SURF_DIST)
        {
            break;
        }
    }
    
    return distFromOrigin;
}

///
/// Calculates normal at a given point by measuring the small deviations of the surface
/// in each direction of the specified position.
/// \param pos - Position on a surface to calculate the normal of.
/// \return - normal vector.
glsl vec3 GetNormal(vec3 pos)
{
	float distance = GetDistToScene(pos);
    vec2 deviation = vec2(.01, 0);
    
    vec3 normal = distance - vec3(
        GetDistToScene(pos-deviation.xyy),
        GetDistToScene(pos-deviation.yxy),
        GetDistToScene(pos-deviation.yyx));
    
    // Normalise as we only want direction.
    return normalize(normal);
}

///
/// Calculates the light intensity at a given point in space.
/// \param pos - Position in space to measure light intensity at.
/// \return - diffuse light intensity.
/// 
glsl float GetLight(vec3 pos)
{
    // Starting light position.
    vec3 lightPos = vec3(0.0, 4.0, 7.0);
    // Move light in circle over time.
    lightPos.xz += vec2(sin(-shadron_Time), cos(-shadron_Time)) * 1.8;
    // Point light, light is in all directions.
    vec3 lightDirecton = normalize(lightPos-pos);
    // Get angle of surface at a particular point in space.
    vec3 normal = GetNormal(pos);
    
    // Diffuse lighting is based on angle of surface compared to light direction.
    // If surface is facing light direction (surface normal is close to light 
    // direction) then diffuse light is strong/bright.
    float diffuse = clamp(dot(normal, lightDirecton), 0.0, 1.0);
    // Check if point in space is behind another object (i.e not the closest
    // surface point along the direction to the light). If behind something
    // then lower the light intesity to simulate a shadow.
    float distance = RayMarch(pos + normal * SURF_DIST * 2.0, lightDirecton);
    if(distance < length(lightPos - pos))
    {
        diffuse *= 0.5;
    }
    
    return diffuse;
}

///
/// Uses ray marching to draw a 3D primitve object lit by a rotating point light.
/// \param fragCoord - fragment coordinate.
/// \return - fragment colour.
///
glsl vec4 LoadPrimitive(vec2 fragCoord)
{
    // Normalise to -1.0 to 1.0.
    vec2 uv = (fragCoord - 0.5) * vec2(WIDTH, HEIGHT)/HEIGHT;

    vec3 colour = vec3(0.0);
    
    // Camera position.
    vec3 rayOrigin = vec3(0.0, 1.5, 0.0);
    // Camera direction.
    vec3 rayDirection = normalize(vec3(uv.x, uv.y, 1.0));

    // Shoot ray in camera direction from camera position. Determine where the
    // closest target is in that direction (max rander distance counts as a 'target')
    float distance = RayMarch(rayOrigin, rayDirection);
    vec3 targetPosition = rayOrigin + rayDirection * distance;
    
    // Colour of target is based on light intensity at sufrace.
    float dif = GetLight(targetPosition);
    colour = vec3(dif) * Light_Colour;
    // Emulates some environmental lighting, surfaces close the camera have some
    // light, the further away the less light is added.
    colour += 1/distance * Envrionment_Colour;
    return vec4(colour,1.0);
}

animation myShader = glsl(LoadPrimitive, WIDTH, HEIGHT);

export gif(myShader, "Primative.gif", 30, 6.2831, true);