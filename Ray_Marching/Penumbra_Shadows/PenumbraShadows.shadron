// Penumbra Shadows

#extension gif
#version 140
#include <math_constants>

const int WIDTH = 700;
const int HEIGHT = 700;
const int MAX_STEPS = 100;
const float MAX_DIST = 100.0;
const float SURF_DIST = 0.01;

parameter bool PenumbraShadowOn = true;
parameter vec3 Envrionment_Colour = vec3(1.0, 1.0, 1.0) : color();
parameter vec3 Light_Colour = vec3(1.0, 1.0, 1.0) : color();

///
/// Removes the intersection area of obj1 and obj2 from obj1.
/// \param objDist1 - distance to first obj.
/// \param objDist2 - distance to second obj.
/// \return - distance to the new obj.
glsl float ObjSubtraction(float objDist1, float objDist2)
{
    return max(-objDist1, objDist2);
}

///
/// Distance to a sphere.
/// \param pos - position in space.
/// \return - distance to sphere.
glsl float SpherePrim(vec3 pos)
{
    vec3 spherePos = vec3(0.0, 0.1, 7.0);
    float sphereRadius = 1.0;
    vec3 sphereTransformed = pos - spherePos;
    float sphereDist =  length(sphereTransformed) - sphereRadius;
    return sphereDist;
}

///
/// Distance to a rectangular box.
/// \param pos - position in space.
/// \return - distance to box.
glsl float rectBoxPrim(vec3 pos)
{
    mat3 rectBoxRotation = mat3(cos(shadron_Time/2.0), 0.0, sin(shadron_Time/2.0), 
                    0.0, 1.0, 0.0,
                    -sin(shadron_Time/2.0), 0.0,  cos(shadron_Time/2.0));
    vec3 rectBoxPos = vec3(0.0, 0.4, 7.0);
    vec3 rectBoxWidth = vec3(0.6, 0.8, 1.8);
    vec3 rectboxTransformed = rectBoxRotation * (pos - rectBoxPos);
    vec3 rectBoxDist = abs(rectboxTransformed) - rectBoxWidth;
    return length(max(rectBoxDist,0.0));
}

///
/// Returns the distance of the closest object in the scene to the specified point. Different
/// objects are loading into the scene based on the Object Selector slider.
/// \param pos - Position in space to measure against.
/// \return - Distance to closet object in scene.
///
glsl float GetDistToScene(vec3 pos)
{
    float objDist = ObjSubtraction(SpherePrim(pos), rectBoxPrim(pos));

    // Ground plane is pos.y distance away from position as it is at y = 0.
    float planeDist = pos.y;
    
    // Return distance to closest object.
    return min(objDist, planeDist);
}

///
/// From the specified origin, ray march in the given direction measuring the distance
/// to the closest object at each step. Once marched close enough to any object in the
/// scene (or marched past the point we care) return the distance.
/// \param rayOrigin - The location to start ray marching from.
/// \return - distance to scene along ray direction (or max render distance)
///
glsl float RayMarch(vec3 rayOrigin, vec3 rayDirection)
{
	float distFromOrigin = 0.0;
    
    // Ray march for a given number of steps.
    for(int step = 0; step < MAX_STEPS; ++step)
    {
        // Current location.
    	vec3 stepLocation = rayOrigin + rayDirection * distFromOrigin;
        // Get the closest distance to anything in the scene from current location.
        float distToScene = GetDistToScene(stepLocation);
        // Travel that distance forwards.
        distFromOrigin += distToScene;
        // If at max render distance (ray missed all objects in scene and is shooting off
        // to infinity) or super close to an object's surface return current distance.
        if(distFromOrigin > MAX_DIST || distToScene < SURF_DIST)
        {
            break;
        }
    }
    
    return distFromOrigin;
}

///
/// Calculates normal at a given point by measuring the small deviations of the surface
/// in each direction of the specified position.
/// \param pos - Position on a surface to calculate the normal of.
/// \return - normal vector.
glsl vec3 GetNormal(vec3 pos)
{
	float distance = GetDistToScene(pos);
    vec2 deviation = vec2(.01, 0);
    
    vec3 normal = distance - vec3(
        GetDistToScene(pos-deviation.xyy),
        GetDistToScene(pos-deviation.yxy),
        GetDistToScene(pos-deviation.yyx));
    
    // Normalise as we only want direction.
    return normalize(normal);
}

///
/// Basic shadow calculation. Ray march back to see if an object is blocking
/// the path to the light.
///
/// \param surfacePos - Surface position to check if there are any shadows.
/// \param directionToLight - The direction to the light source to check for shadows.
/// \return - shadow amount.
///
glsl float Shadow(vec3 surfacePos, vec3 directionToLight)
{
    float minStep = 0.01;
    float maxStep = 3.0;
    float step = minStep;
    while(step < maxStep)
    {
        float distToScene = GetDistToScene(surfacePos + directionToLight * step);
        if(distToScene < 0.001)
        {
            return 0.0;
        }
        step += distToScene;
    }
    return 1.0;
}

///
/// Apply Penumbra Shadows based on objection position and light direction.
/// Ray march back checking if anything is blocking light to path or is very close
/// to the path back to the light. If close apply a shadow based on how close.
///
/// \param surfacePos - Surface position to check if there are any shadows.
/// \param directionToLight - The direction to the light source to check for shadows.
/// \return - shadow amount.
///
glsl float PenumbraShadow(vec3 surfacePos, vec3 directionToLight)
{
    float minStep = 0.01;
    float maxStep = 3.0;
    float step = minStep;
	float residualShadow = 1.0;
    float previousStep = 1e10; // big, such that y = 0 on the first iteration
    
    for(int iteration = 0; iteration < 32; iteration++)
    {
        // Distance from current ray position (traveling back to light) to closest object.
        // Measured as a radius from current position on ray.
		float distToScene = GetDistToScene(surfacePos + (directionToLight * step));
        // Actual distance/position along ray that is closest to object.
        // The spot on the ray perpendicular to the object.
        float distToClosest = (distToScene * distToScene)/(2.0 * previousStep);
        // Shortest distance to closest object to ray (travelling back to light).
        float distRayToObj = sqrt((distToScene * distToScene) - distToClosest * distToClosest);
        residualShadow = min(residualShadow, 10.0 * distRayToObj/max(0.0, step - distToClosest));

        previousStep = distToScene;
        step += distToScene;
        
        if(residualShadow < 0.0001 || step > maxStep)
        {
            break;
        }
    }
    return clamp(residualShadow, 0.0, 1.0);
}

///
/// Calculates the light intensity at a given point in space.
/// \param pos - Position in space to measure light intensity at.
/// \return - diffuse light intensity.
/// 
glsl float GetLight(vec3 pos)
{
    // Starting light position.
    vec3 lightPos = vec3(0.0, 4.0, 7.0);
    // Move light in circle over time.
    lightPos.xz += vec2(sin(-shadron_Time), cos(-shadron_Time)) * 1.8;
    
    // Point light, light is in all directions.
    vec3 lightDirecton = normalize(lightPos-pos);
    // Get angle of surface at a particular point in space.
    vec3 normal = GetNormal(pos);

    // Diffuse lighting is based on angle of surface compared to light direction.
    // If surface is facing light direction (surface normal is close to light 
    // direction) then diffuse light is strong/bright.
    float diffuse = clamp(dot(normal, lightDirecton), 0.0, 1.0);
    
    if(PenumbraShadowOn)
    {
        diffuse *= PenumbraShadow(pos, lightDirecton);
    }
    else
    {
        diffuse *= Shadow(pos, lightDirecton);
    }
    return diffuse;
}

///
/// Uses ray marching to draw a 3D primitve object lit by a rotating point light.
/// \param fragCoord - fragment coordinate.
/// \return - fragment colour.
///
glsl vec4 LoadPrimitive(vec2 fragCoord)
{
    // Normalise to -1.0 to 1.0.
    vec2 uv = (fragCoord - 0.5) * vec2(WIDTH, HEIGHT)/HEIGHT;

    vec3 colour = vec3(0.0);
    
    // Camera position.
    vec3 rayOrigin = vec3(0.0, 1.5, 0.0);
    // Camera direction.
    vec3 rayDirection = normalize(vec3(uv.x, uv.y, 1.0));

    // Shoot ray in camera direction from camera position. Determine where the
    // closest target is in that direction (max rander distance counts as a 'target')
    float distance = RayMarch(rayOrigin, rayDirection);
    vec3 targetPosition = rayOrigin + rayDirection * distance;
    
    // Colour of target is based on light intensity at sufrace.
    float dif = GetLight(targetPosition);

    colour = dif * Light_Colour;
    // Emulates some environmental lighting, surfaces close the camera have some
    // light, the further away the less light is added.
    colour += 1/distance * Envrionment_Colour;
    
    return vec4(colour,1.0);
}

animation myShader = glsl(LoadPrimitive, WIDTH, HEIGHT);

export gif(myShader, "PenumbraShadows.gif", 30, 6.2831, true);