// Ray March of coloured objects with reflections

#extension gif
#version 140
#include <math_constants>

const int WIDTH = 1920;
const int HEIGHT = 1080;
const int MAX_STEPS = 100;
const float MAX_DIST = 100.0;
const float SURF_DIST = 0.01;

parameter int Number_Of_Light_Bounces = 2 : range(1, 4);
parameter float rotation = 0 : range(0.0f, 4.0f);

// Details of an object in the scene.
glsl struct ObjDetails
{
    float distance;
    vec3 colour;
};

///
/// Distance to a sphere.
/// \param pos - World position.
/// \param spherePos - Position of the centre of the sphere.
/// \param sphereRadius - Radius of the sphere.
/// \return - distance from the world position to the sphere.
///
glsl float DistanceToSphere(vec3 pos, vec3 spherePos, float sphereRadius)
{
    // Apply transformation.
    vec3 sphereTransformed = pos - spherePos;
    // Sphere is defined as a uniform distace from position.
    float sphereDist =  length(sphereTransformed) - sphereRadius;
    return sphereDist;
}

///
/// Distance to a cube.
/// \param pos - World position.
/// \param cubePos - Position of the centre of the cube.
/// \param cubeWidth - Radius of the cube.
/// \return - distance from the world position to the cube.
///
glsl float DistanceToCube(vec3 pos, vec3 cubePos, float cubeWidth)
{
    float angle = 0.7f * rotation; //shadron_Time;
    // Rotation matrix, rotate over time.
    mat3 sqBoxRotation = mat3( 1.0, 0.0,0.0, 
                    0.0, cos(angle), sin(angle),
                    0.0,  -sin(angle), cos(angle));

    // Apply width which defines the box shape.
    vec3 sqBoxDist = abs(sqBoxRotation * (pos - cubePos)) - cubeWidth/1.3f;
    return length(max(sqBoxDist,0.0));
}

///
/// Distance to the plane.
/// \param pos - World position.
/// \return distance from world position to ground plane.
glsl float DistanceToPlane(vec3 pos)
{
    return pos.y;
}

///
/// Returns the details of the closest object in the scene to the specified point.
/// \param pos - Position in space to measure against.
/// \return - Distance to closet object in scene.
///
glsl ObjDetails GetSceneDetails(vec3 pos)
{
    float objDist1 = DistanceToSphere(pos, vec3(0.0, 1.0, 6.0), 1.0f);
    float objDist2 = DistanceToSphere(pos, vec3(3.0, 1.0, 6.0), 1.0f);
    float objDist3 = DistanceToSphere(pos, vec3(-3.0, 1.0, 6.0), 1.0f);
    float objDist4 = DistanceToSphere(pos, vec3(1.5, 1.0, 8.5), 1.0f);

    // Ground plane is pos.y distance away from position as it is at y = 0.
    float planeDist = DistanceToPlane(pos);
    
    // Return distance to closest object.
    ObjDetails objDetails;
    objDetails.distance = min(objDist1, min(objDist2, min(objDist3, min(objDist4, planeDist))));

    // Check with object was chosen and return the distance to that object
    // and the colour of that object.
    if(objDetails.distance == objDist1)
    {
        objDetails.colour = vec3(0.8, 0.2, 0.1);
    }
    else if(objDetails.distance == objDist2)
    {
        objDetails.colour = vec3(0.1, 0.5, 0.9);
    }
    else if(objDetails.distance == objDist3)
    {
        objDetails.colour = vec3(0.2, 0.7, 0.5);
    }
    else if(objDetails.distance == objDist4)
    {
        objDetails.colour = vec3(0.3, 0.6, 0.1);
    }
    else if(objDetails.distance == planeDist)
    {
        objDetails.colour = vec3(0.8, 0.8, 0.8);
    }
    else
    {
        objDetails.colour = vec3(0.0, 0.0, 0.0);
    }
    
    return objDetails;
}

///
/// Calculates normal at a given point by measuring the small deviations of the surface
/// in each direction of the specified position.
/// \param pos - Position on a surface to calculate the normal of.
/// \return - normal vector.
glsl vec3 GetNormal(vec3 pos)
{
	float distance = GetSceneDetails(pos).distance;
    vec2 deviation = vec2(.01, 0);
    
    vec3 normal = distance - vec3(
        GetSceneDetails(pos-deviation.xyy).distance,
        GetSceneDetails(pos-deviation.yxy).distance,
        GetSceneDetails(pos-deviation.yyx).distance);
    
    // Normalise as we only want direction.
    return normalize(normal);
}

///
/// Calculates the relfected vector and an incident vector about a normal.
/// \param rayDirection - Direction of the incident ray.
/// \param surfaceNormal - Normal vector of surface.
/// \reutrn - The reflected vector about the normal.
///
glsl vec3 GetReflection(vec3 rayDirection, vec3 surfaceNormal)
{
    return rayDirection - 2 * (dot(rayDirection, surfaceNormal) * surfaceNormal);
}

///
/// From the specified origin, ray march in the given direction measuring the distance
/// to the closest object at each step. Once marched close enough to any object in the
/// scene (or marched past the point we care) return the distance.
/// \param rayOrigin - The location to start ray marching from.
/// \return - distance to scene along ray direction (or max render distance)
///
glsl ObjDetails RayMarch(vec3 rayOrigin, vec3 rayDirection)
{
    ObjDetails object;
    vec3 stepLocation;
	float distFromOrigin = 0.0;
    
    // Ray march for a given number of steps.
    for(int step = 0; step < MAX_STEPS; ++step)
    {
        // Current location.
    	stepLocation = rayOrigin + rayDirection * distFromOrigin;
        // Get the closest distance to anything in the scene from current location.
        object = GetSceneDetails(stepLocation);
        float distToScene = object.distance;
        // Travel that distance forwards.
        distFromOrigin += distToScene;
        // If at max render distance (ray missed all objects in scene and is shooting off
        // to infinity) or super close to an object's surface return current distance.
        if(distFromOrigin > MAX_DIST || distToScene < SURF_DIST)
        {
            break;
        }
    }

    object.distance = distFromOrigin;
    return object;
}

///
/// Apply Penumbra Shadows based on objection position and light direction.
/// Ray march back checking if anything is blocking light to path or is very close
/// to the path back to the light. If close apply a shadow based on how close.
///
/// \param surfacePos - Surface position to check if there are any shadows.
/// \param directionToLight - The direction to the light source to check for shadows.
/// \return - shadow amount.
///
glsl float PenumbraShadow(vec3 surfacePos, vec3 directionToLight)
{
    float minStep = 0.01;
    float maxStep = 3.0;
    float step = minStep;
	float residualShadow = 1.0;
    float previousStep = 1e10; // big, such that y = 0 on the first iteration
    
    for(int iteration = 0; iteration < 32; iteration++)
    {
        // Distance from current ray position (traveling back to light) to closest object.
        // Measured as a radius from current position on ray.
		float distToScene = GetSceneDetails(surfacePos + (directionToLight * step)).distance;
        // Actual distance/position along ray that is closest to object.
        // The spot on the ray perpendicular to the object.
        float distToClosest = (distToScene * distToScene)/(2.0 * previousStep);
        // Shortest distance to closest object to ray (travelling back to light).
        float distRayToObj = sqrt((distToScene * distToScene) - distToClosest * distToClosest);
        residualShadow = min(residualShadow, 10.0 * distRayToObj/max(0.0, step - distToClosest));

        previousStep = distToScene;
        step += distToScene;
        
        if(residualShadow < 0.0001 || step > maxStep)
        {
            break;
        }
    }
    return clamp(residualShadow, 0.0, 1.0);
}

///
/// Calculates the light intensity at a given point in space.
/// \param pos - Position in space to measure light intensity at.
/// \return - diffuse light intensity.
/// 
glsl float GetLight(vec3 pos)
{
    // Starting light position.
    vec3 lightPos = vec3(0.0, 4.0, 4.0);
    // Move light in circle over time.
    //lightPos.xz += vec2(sin(-shadron_Time), cos(-shadron_Time)) * 1.8;
    // Point light, light is in all directions.
    vec3 lightDirecton = normalize(lightPos-pos);
    // Get angle of surface at a particular point in space.
    vec3 normal = GetNormal(pos);
    
    // Diffuse lighting is based on angle of surface compared to light direction.
    // If surface is facing light direction (surface normal is close to light 
    // direction) then diffuse light is strong/bright.
    float diffuse = clamp(dot(normal, lightDirecton), 0.0, 1.0);

    diffuse *= PenumbraShadow(pos, lightDirecton);
    
    return diffuse;
}

///
/// Calcuates the colour of an object in the scene based on the number of reflections.
///
/// \param rayOrigin - The starting location of the ray before it bounces.
/// \param rayDirection - The initial direction of the ray before it bounces.
/// \param numOfBounces - The total number of reflections or times the light ray bounces.
/// \return - The final colour taking reflections into account.
///
glsl vec3 RayMarchColourBounce(vec3 rayOrigin, vec3 rayDirection, int numOfBounces)
{
    vec3 colour = vec3(0.0f, 0.0f, 0.0f);
    ObjDetails reflectionObj;
    vec3 bounceLocation = rayOrigin;
    vec3 bounceDirection = rayDirection;
    float distFromReflection = SURF_DIST * 2.0;

    // Ray march for a given number of bounces.
    for(int bounce = 1; bounce <= numOfBounces; ++bounce)
    {
        reflectionObj = RayMarch(bounceLocation, bounceDirection);

        // Colour of target is based on light intensity at sufrace and the colour of the surface.
        vec3 reflectionLocation = bounceLocation + (bounceDirection * reflectionObj.distance);
        float lightIntensity = 1.5f;
        vec3 lightColour = vec3(1.0, 1.0, 1.0) * lightIntensity;
        float dif = GetLight(reflectionLocation);
        reflectionObj.colour = reflectionObj.colour * vec3(dif) * lightColour;

        // Mix colour of reflection with main surface colour.
        colour = mix(colour, reflectionObj.colour, 1.0f/(bounce * bounce));

        // If shooting off to inifinity or ground plane hit stop bouncing.
        if(reflectionObj.distance > MAX_DIST)// || DistanceToPlane(reflectionLocation) <= distFromReflection)
        {
            break;
        }

        // Update location and ray march along reflection vector on next interation.
        vec3 surfaceNormal = GetNormal(reflectionLocation);
        bounceLocation += reflectionLocation + (distFromReflection * surfaceNormal);
        bounceDirection = GetReflection(bounceDirection, surfaceNormal);
    }

    return colour;
}

///
/// Uses ray marching to draw a 3D primitve object lit by a rotating point light.
/// \param fragCoord - fragment coordinate.
/// \return - fragment colour.
///
glsl vec4 LoadScene(vec2 fragCoord)
{
    // Normalise to -1.0 to 1.0.
    vec2 uv = (fragCoord - 0.5) * vec2(WIDTH, HEIGHT)/HEIGHT;
    
    // Camera position.
    vec3 rayOrigin = vec3(0.0, 1.5, 0.0);
    // Camera direction.
    vec3 rayDirection = normalize(vec3(uv.x, uv.y, 1.0));

    // Shoot ray in camera direction from camera position. Determine where the
    // closest target is in that direction (max rander distance counts as a 'target')
    vec3 colour = RayMarchColourBounce(rayOrigin, rayDirection, Number_Of_Light_Bounces);
    
    return vec4(colour, 1.0);
}

animation myShader = glsl(LoadScene, WIDTH, HEIGHT);

export png(myShader, "Reflections.png");